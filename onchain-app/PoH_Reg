// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IProofOfHumanity {
    function isRegistered(address _submissionID) external view returns (bool);
}

contract TokenReportRegistry {
    // Reference to Proof-of-Humanity contract
    IProofOfHumanity public proofOfHumanity;

    // Struct to hold report details
    struct Report {
        address reporter;
        string reason;
        uint256 timestamp;
    }

    // Mapping from token address to list of reports
    mapping(address => Report[]) public tokenReports;

    // Mapping to check if a reporter has already reported a token
    mapping(address => mapping(address => bool)) public hasReported;

    // Mapping for verified tokens
    mapping(address => bool) public verifiedTokens;

    // Mapping for token votes (positive and negative)
    mapping(address => uint256) public positiveVotes;
    mapping(address => uint256) public negativeVotes;

    // Thresholds for marking tokens as risky or safe
    uint256 public riskThreshold;
    uint256 public safeThreshold;

    // Admin address
    address public admin;

    // Events
    event TokenReported(address indexed tokenAddress, address indexed reporter, string reason);
    event TokenCleared(address indexed tokenAddress);
    event TokenVerified(address indexed tokenAddress);
    event TokenVoted(address indexed tokenAddress, address indexed voter, bool vote);
    event ThresholdsUpdated(uint256 newRiskThreshold, uint256 newSafeThreshold);

    constructor(address _proofOfHumanityAddress, uint256 _riskThreshold, uint256 _safeThreshold) {
        admin = msg.sender; // Set deployer as admin
        riskThreshold = _riskThreshold;
        safeThreshold = _safeThreshold;
        proofOfHumanity = IProofOfHumanity(_proofOfHumanityAddress);
    }

    // Function to report a token
    function reportToken(address _tokenAddress, string calldata _reason) external onlyHuman {
        require(_tokenAddress != address(0), "Invalid token address");
        require(!hasReported[_tokenAddress][msg.sender], "You have already reported or voted on this token");

        // Record the report
        tokenReports[_tokenAddress].push(Report({
            reporter: msg.sender,
            reason: _reason,
            timestamp: block.timestamp
        }));

        hasReported[_tokenAddress][msg.sender] = true;

        emit TokenReported(_tokenAddress, msg.sender, _reason);
    }

    // Function to get the number of reports for a token
    function getReportCount(address _tokenAddress) external view returns (uint256) {
        return tokenReports[_tokenAddress].length;
    }

    // Function to get reports for a token
    function getReports(address _tokenAddress) external view returns (Report[] memory) {
        return tokenReports[_tokenAddress];
    }

    // Function for admin to verify a token
    function verifyToken(address _tokenAddress) external onlyAdmin {
        verifiedTokens[_tokenAddress] = true;
        emit TokenVerified(_tokenAddress);
    }

    // Function to cast a vote on a token
    function voteOnToken(address _tokenAddress, bool _isPositive) external onlyHuman {
        require(_tokenAddress != address(0), "Invalid token address");
        require(!hasReported[_tokenAddress][msg.sender], "You have already reported or voted on this token");

        if (_isPositive) {
            positiveVotes[_tokenAddress] += 1;
        } else {
            negativeVotes[_tokenAddress] += 1;
        }

        hasReported[_tokenAddress][msg.sender] = true;

        emit TokenVoted(_tokenAddress, msg.sender, _isPositive);
    }

    // Function to check if a token is risky based on votes
    function isTokenRisky(address _tokenAddress) public view returns (bool) {
        uint256 negVotes = negativeVotes[_tokenAddress];
        return negVotes >= riskThreshold;
    }

    // Function to check if a token is safe based on votes
    function isTokenSafe(address _tokenAddress) public view returns (bool) {
        uint256 posVotes = positiveVotes[_tokenAddress];
        return posVotes >= safeThreshold;
    }

    // Function to update thresholds (admin only)
    function updateThresholds(uint256 _riskThreshold, uint256 _safeThreshold) external onlyAdmin {
        riskThreshold = _riskThreshold;
        safeThreshold = _safeThreshold;

        emit ThresholdsUpdated(_riskThreshold, _safeThreshold);
    }

    // Admin function to clear reports
    function clearReports(address _tokenAddress) external onlyAdmin {
        delete tokenReports[_tokenAddress];
        delete positiveVotes[_tokenAddress];
        delete negativeVotes[_tokenAddress];

        emit TokenCleared(_tokenAddress);
    }

    // Modifier for admin-only functions
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    // Modifier to check if sender is a registered human
    modifier onlyHuman() {
        require(proofOfHumanity.isRegistered(msg.sender), "You are not registered with Proof-of-Humanity");
        _;
    }

    // Function to transfer admin rights
    function transferAdmin(address _newAdmin) external onlyAdmin {
        require(_newAdmin != address(0), "Invalid address");
        admin = _newAdmin;
    }
}
